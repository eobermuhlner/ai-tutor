plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.25'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'application'
    id 'jacoco'
}

// Note: Gradle 10.0 deprecation warning for StartParameter.isConfigurationCacheRequested
// comes from plugin internals. Will be resolved with future Spring Boot/Kotlin plugin updates.
// No action required - build works correctly.

group = 'ch.obermuhlner'
version = '0.0.1-SNAPSHOT'
description = 'AI Tutor'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    runtimeOnly 'com.h2database:h2'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'io.mockk:mockk:1.13.8'
    testImplementation 'com.ninja-squad:springmockk:4.0.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll(['-Xjsr305=strict'])
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/AiTutorApplication**',
                '**/cli/**',
                '**/dto/**',
                '**/domain/**',
                '**/conversation/service/**'  // Spring AI integration, requires integration tests
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/AiTutorApplication**',
                '**/cli/**',
                '**/dto/**',
                '**/domain/**',
                '**/conversation/service/**'  // Spring AI integration, requires integration tests
            ])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification

springBoot {
    mainClass = 'ch.obermuhlner.aitutor.AiTutorApplicationKt'
}

application {
    mainClass = 'ch.obermuhlner.aitutor.cli.AiTutorCli'
}

// Descriptive aliases for dual entry points
tasks.register('runServer') {
    group = 'application'
    description = 'Runs the Spring Boot REST API server'
    dependsOn tasks.bootRun
}

tasks.register('runCli') {
    group = 'application'
    description = 'Runs the standalone CLI client'
    dependsOn tasks.run
}
